--getting all the submitter uploads
select d.id as id, d.original_filename as originalFilename, d.page_info_text  as documentPageNumber,
       to_char(d.created_date, 'YYYY-mm-dd') as uploadDate, u.full_name as uploadAuthorFullName, d.is_pdf as isPdf,
       case
           when d.document_type = 2 THEN 'Risk Indicator Report'
           when d.document_type = 3 THEN 'FOCI Business Assessment'
           when d.document_type = 4 THEN 'Risk Mitigation Strategy'
           when d.document_type = 5 THEN 'Commitment Letter'
           else (select name from sections where id = (select section_id from questions where id =d.question_id))
           end as sectionName
from documents d
join users u on (d.created_userid = u.id)
where d.sf328_id =10022
order by d.created_date desc;

--part 1 getting the cage code for the passed in sf328
select s.cage_code_id
from sf328s s
where s.id=10022;

-- part 2 getting the contract ids that match the cage code
select * from contracts_cage_codes where cage_code_id =10012;

--part 3 getting the contracts from the cage code ids
select * from documents where contract_id =10015 or contract_id= 10011;

select d.*
from documents d
where d.sf328_id =10022;

select A.id as id, A.original_filename as originalFilename, A.page_info_text  as documentPageNumber,
        to_char(A.created_date, 'YYYY-mm-dd') as uploadDate, A.full_name as uploadAuthorFullName, A.is_pdf as isPdf,
         A.sectionName as sectionName
    from
(select d.id, d.original_filename, d.page_info_text, d.created_date, u.full_name, d.is_pdf,
       'GCA uploaded file' as sectionName
from sf328s s
join contracts_cage_codes ccc on (s.cage_code_id = ccc.cage_code_id)
join documents d on (d.contract_id = ccc.contract_id)
join users u on (d.created_userid = u.id)
where s.id=10022
UNION
select d.id, d.original_filename, d.page_info_text, d.created_date, u.full_name, d.is_pdf,
       case
           when d.document_type = 2 THEN 'Risk Indicator Report'
           when d.document_type = 3 THEN 'FOCI Business Assessment'
           when d.document_type = 4 THEN 'Risk Mitigation Strategy'
           when d.document_type = 5 THEN 'Commitment Letter'
           else (select name from sections where id = (select section_id from questions where id =d.question_id))
           end as sectionName
from documents d
         join users u on (d.created_userid = u.id)
where d.sf328_id =10022) A
order by A.created_date desc;





					SQL Joins old style

						-- Cartesion Product    if tableA has 3 rows and table B has 8 rows ---> join results in 24 rows
						select a.*, b.*
						from tableA a, tableB b
						where a.id = b.sales_person_id




					SQL Joins current style (ANSI standard)

						select a.*, b.*
						from tableA a
						JOIN tableB b ON (a.id = b.sales_person_id)
						WHERE a.id=this OR b.something is null

						ORDER BY 1, 2, 3, a.col, b.col
						LIMIT 5




						LEFT JOIN



						RIGHT JOIN



						OUTER JOIN -- fucking stupid / I have never used them in a real programming assignment


						INNER JOIN -- plain old JOIN   (record must exist in both tables)





		Backend Developers
		------------------
		1) Use java to run SQL queries

		2) Use java to run ElasticSearch queries

		3) The value-added part is the SQL query or ElasticSearch query  (not the java stuff / executing SQL is EASY because we have spring-jdbc / JdbcTemplate )
		   -- So, a great backend developer needs to be GREAT at SQL and/or ElasticSearch








				Sales						Users
				------------------- 		---------------------
				id, sales_person_id			id
					2						1
					2						2
					51						3



        Subtle SQL Lessons
		------------------
		A) When running your SQL, you want to *KNOW* the answer ahead of time
			-- So, explore your data **FIRST**
			-- Build your SQL **SECOND**


		B) Use SchemaSpy to explore the tables
			-- Run it a lot / the database design changes / so you need to run schema spy to update it
			-- Bookmark the index.html


		C) If there are no arrows in SchemaSpy, then there are no foreign keys
		   DANGEROUS!!!


		D) SQL Columns should be homogenous
			-- Don't combine a String and a number into one column
			   BETTER:  Return the number or null and have the front-end format/display it differently

				In your DTO


				private class myDTO {

						@JsonProperty("userid")
						private Integer userid;

				}


		E) SQL is powerful
			Hibernate		--> You provide java classes --> It generates the SQL
			ORM -- Object Relational Mapping


			What we do in our project
			-------------------------
			+ We can optimize our SQL
			+ We have all of the power
			- Requires devs to know SQL

				Java Developer wants to run some SQL
						|
						V
					Insert our own CUSTOM SQL into code
						|
						|
						V
					Execute SQL    (JdbcTemplate stuff)
						|
						V
					Get response from database




			Hibernate Developers
			--------------------
			+ Devs do not have to know SQL
			- Generated SQL sucks
			- Runs substantially slower

				Java Developer wants to run some SQL
						|
						V
					Write SQL classes for tables (if 100 tables, then 100 classes)
						|
						|
						|
						V
					Execute SQL you take your table class and call methods Sales.getById(5);
						|
						V
					Hibernate generates the SQL
						|
						|
  					Execute SQL    (JdbcTemplate stuff)
						|
						V
					Get response from database



select coalesce(u.full_name, 'Unknown') as full_name, s.sell_date, s.value //coalesce is similar to using a CASE statement. In this example we want to change
from sales s                                                               // null to unknown.
LEFT JOIN users u on (s.salesperson_id = u.id);         // LEFT JOIN grabs everything from the sales table and grabs only the user id from the users table

select
    case
        when u.full_name is null then 'Unknown'
        else u.full_name
        end as full_name, s.sell_date, s.value
from sales s
         FULL OUTER JOIN users u on (s.salesperson_id = u.id);     //full outer join to get all users and sales transactions from users and sales tables