What is Type Annotation in TypeScript
TypeScript uses type annotations to explicitly specify types for identifiers such variables, functions, objects, etc.

TypeScript uses the syntax : type after an identifier as the type annotation, where type can be any valid type.

Once an identifier is annotated with a type, it can be used as that type only.
If the identifier is used as a different type, the TypeScript compiler will issue an error.
---------------------------------------------------------------------------------------
Type annotations in variables and constants
The following syntax shows how to specify type annotations for variables and constants:
*******************************************************
let variableName: type;
let variableName: type = value;
const constantName: type = value;

Example*
let counter: number;  //number annotation for variable

counter = 1;  //assigning a number to the counter variable

let counter: number = 1; //type annotation and initializing it in the same statement
*****************************************************************************************************

Type annotation examples
-------------------------
Arrays
=======
To annotate an array type you use use a specific type followed by a square bracket : type[] :
*************************
let arrayName: type[];
*************************

For example, the following declares an array of strings:
******************************************************************
let names: string[] = ['John', 'Jane', 'Peter', 'David', 'Mary']; //all data in array must match primitive data type
******************************************************************

Objects
=======
To specify a type for an object, you use the object type annotation. For example:
***********************
let person: {
   name: string;
   age: number
};
***********************  // Objects can have all sorts of primitive data types within curly braces
person = {
   name: 'John',
   age: 25
}; // valid
**********************

Function arguments & return types
=================================
The following shows a function annotation with parameter type annotation and return type annotation:

******************************************
let greeting : (name: string) => string;
******************************************
In this example, you can assign any function that accepts a string and returns a string to the greeting variable:

greeting = function (name: string) {
    return `Hi ${name}`;
};

ngOnInIt method typescript examples
    let obj1: ReportDto = new ReportDto(); //using the "new" syntax (java familiar)

    obj1.id= 10;
    obj1.displayName= "Rpt 1";

    let obj2: ReportDto = new ReportDto();

    obj2.id= 20;
    obj2.displayName= "Rpt 2";

    let obj3: ReportDto =
    {
      id: 30,
      displayName:"Rpt 3",
      isFinished: true
    }

    let example: ReportDto[] = [];   //This is a way to create an array of objects using the push method

    example.push(obj1);
    example.push(obj2);
    example.push(obj3);

    let newExample: ReportDto[] = [obj1, obj2, obj3]; // This is a short version of creating an array of objects

    let lastArray: ReportDto[]= [ //This is the curly brace syntax
      {
        id: 10,
        displayName: "Rpt 1",
        isFinished: false
      },{
      id: 20,
      displayName: "Rpt 2",
      isFinished: false
      },{
      id:30,
      displayName: "Rpt 3",
      isFinished: true
      }
    ];

    Front end service******************************************************************************************************************
    import { Injectable } from '@angular/core';
    import {Observable, of} from "rxjs";
    import {IndicatorDto} from "../models/indicator-dto";

    @Injectable({
      providedIn: 'root'
    })
    export class MyGridService {

      public getAllIndicator(): Observable<IndicatorDto[]>{
        let obj1: IndicatorDto = new IndicatorDto();

        obj1.id= 10;
        obj1.name= "Melanie";
        obj1.type= 1;

        let obj2: IndicatorDto = new IndicatorDto();

        obj2.id= 2;
        obj2.name= "Adam";
        obj2.type= 2;

        let obj3: IndicatorDto = new IndicatorDto();

        obj3.id= 3;
        obj3.name= "David";
        obj3.type=3;

        let newArray: IndicatorDto[] = [obj1, obj2, obj3]

        return of(newArray)

      }

      public getAllIndicatorsTwo(): Observable<IndicatorDto[]>{

        let objects: IndicatorDto[] =[{
          id: 10,
          name: "Melanie",
          type: 1
        }, {
          id: 20,
          name: "Adam",
          type: 2
        },{
          id:30,
          name: "David",
          type: 3
        }];

        return of(objects);

      }

      constructor() { }
    }


Front end DTO*******************************************************************************

export class IndicatorDto {

  public id: number;

  public name: string;

  public type: number;
}
